warn("95g2472b53i4753n4528k1l")
warn("N2kh4fb2nn(d3nmr)")
local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()
local Window = OrionLib:MakeWindow({Name = "Cool blade ball script", HidePremium = false, SaveConfig = true, ConfigFolder = "OrionTest"})
OrionLib:MakeNotification({
	Name = "cheat engine",
	Content = "Notify(shittycontent)",
	Image = "rbxassetid://4483345998",
	Time = 5
})
wait(4)
OrionLib:MakeNotification({
	Name = "some times the autoparry dosentwork",
	Content = "you must die!",
	Image = "rbxassetid://4483345998",
	Time = 5
})
local MainTab = Window:MakeTab({
	Name = "main",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})
-- Functions --
local function startAutoParry()
	local player = game.Players.LocalPlayer
	local character = player.Character or player.CharacterAdded:Wait()
	local replicatedStorage = game:GetService("ReplicatedStorage")
	local runService = game:GetService("RunService")
	local parryButtonPress = replicatedStorage.Remotes.ParryButtonPress
	local ballsFolder = workspace:WaitForChild("Balls")

	print(" Script = loaded")

	local function onCharacterAdded(newCharacter)
		character = newCharacter
	end

	player.CharacterAdded:Connect(onCharacterAdded)

	local focusedBall = nil  

	local function chooseNewFocusedBall()
		local balls = ballsFolder:GetChildren()
		focusedBall = nil
		for _, ball in ipairs(balls) do
			if ball:GetAttribute("realBall") == true then
				focusedBall = ball
				break
			end
		end
	end

	chooseNewFocusedBall()

	local function timeUntilImpact(ballVelocity, distanceToPlayer, playerVelocity)
		local directionToPlayer = (character.HumanoidRootPart.Position - focusedBall.Position).Unit
		local velocityTowardsPlayer = ballVelocity:Dot(directionToPlayer) - playerVelocity:Dot(directionToPlayer)

		if velocityTowardsPlayer <= 0 then
			return math.huge
		end

		local distanceToBeCovered = distanceToPlayer - 40
		return distanceToBeCovered / velocityTowardsPlayer
	end

	local BASE_THRESHOLD = 0.15
	local VELOCITY_SCALING_FACTOR = 0.002

	local function getDynamicThreshold(ballVelocityMagnitude)
		local adjustedThreshold = BASE_THRESHOLD - (ballVelocityMagnitude * VELOCITY_SCALING_FACTOR)
		return math.max(0.12, adjustedThreshold)
	end

	local function checkBallDistance()
		if not character:FindFirstChild("Highlight") then return end
		local charPos = character.PrimaryPart.Position
		local charVel = character.PrimaryPart.Velocity

		if focusedBall and not focusedBall.Parent then
			chooseNewFocusedBall()
		end

		if not focusedBall then return end

		local ball = focusedBall
		local distanceToPlayer = (ball.Position - charPos).Magnitude

		if distanceToPlayer < 10 then
			parryButtonPress:Fire()
			return
		end

		local timeToImpact = timeUntilImpact(ball.Velocity, distanceToPlayer, charVel)
		local dynamicThreshold = getDynamicThreshold(ball.Velocity.Magnitude)

		if timeToImpact < dynamicThreshold then
			parryButtonPress:Fire()
		end
	end
	heartbeatConnection = game:GetService("RunService").Heartbeat:Connect(function()
		checkBallDistance()
	end)
end

local function stopAutoParry()
	if heartbeatConnection then
		heartbeatConnection:Disconnect()
		heartbeatConnection = nil
	end
end

-- Toggle --
-- Toggle --
MainTab:AddToggle({
	Name = "auto Parry",
	Default = false,
	Callback = function(Value)
		if Value then
			startAutoParry()
		else
			stopAutoParry()
		end
	end    
})
MainTab:AddButton({
	Name = "Button!",
	Callback = function()
		local ToDisable = {
			Textures = true,
			VisualEffects = true,
			Parts = true,
			Particles = true,
			Sky = true
		}

		local ToEnable = {
			FullBright = false
		}

		local Stuff = {}

		for _, v in next, game:GetDescendants() do
			if ToDisable.Parts then
				if v:IsA("Part") or v:IsA("Union") or v:IsA("BasePart") then
					v.Material = Enum.Material.SmoothPlastic
					table.insert(Stuff, 1, v)
				end
			end

			if ToDisable.Particles then
				if v:IsA("ParticleEmitter") or v:IsA("Smoke") or v:IsA("Explosion") or v:IsA("Sparkles") or v:IsA("Fire") then
					v.Enabled = false
					table.insert(Stuff, 1, v)
				end
			end

			if ToDisable.VisualEffects then
				if v:IsA("BloomEffect") or v:IsA("BlurEffect") or v:IsA("DepthOfFieldEffect") or v:IsA("SunRaysEffect") then
					v.Enabled = false
					table.insert(Stuff, 1, v)
				end
			end

			if ToDisable.Textures then
				if v:IsA("Decal") or v:IsA("Texture") then
					v.Texture = ""
					table.insert(Stuff, 1, v)
				end
			end

			if ToDisable.Sky then
				if v:IsA("Sky") then
					v.Parent = nil
					table.insert(Stuff, 1, v)
				end
			end
		end

		game:GetService("TestService"):Message("Effects Disabler Script : Successfully disabled "..#Stuff.." assets / effects. Settings :")

		for i, v in next, ToDisable do
			print(tostring(i)..": "..tostring(v))
		end

		if ToEnable.FullBright then
			local Lighting = game:GetService("Lighting")

			Lighting.FogColor = Color3.fromRGB(255, 255, 255)
			Lighting.FogEnd = math.huge
			Lighting.FogStart = math.huge
			Lighting.Ambient = Color3.fromRGB(255, 255, 255)
			Lighting.Brightness = 5
			Lighting.ColorShift_Bottom = Color3.fromRGB(255, 255, 255)
			Lighting.ColorShift_Top = Color3.fromRGB(255, 255, 255)
			Lighting.OutdoorAmbient = Color3.fromRGB(255, 255, 255)
			Lighting.Outlines = true
		end
	end    
})
